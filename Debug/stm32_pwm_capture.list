
stm32_pwm_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ac  080028ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028b4  080028b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b9c3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001832  00000000  00000000  0002ba42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b68  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008fc  00000000  00000000  0002dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ff94  00000000  00000000  0002e6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cdf3  00000000  00000000  0004e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6cd4  00000000  00000000  0005b463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000305c  00000000  00000000  00122138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00125194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800287c 	.word	0x0800287c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800287c 	.word	0x0800287c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fae4 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f864 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f942 	bl	8000758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004d4:	f000 f916 	bl	8000704 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8c8 	bl	800066c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004dc:	4828      	ldr	r0, [pc, #160]	; (8000580 <main+0xbc>)
 80004de:	f001 faf9 	bl	8001ad4 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (cnt == 24){
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <main+0xc0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b18      	cmp	r3, #24
 80004e8:	d1fb      	bne.n	80004e2 <main+0x1e>
		  cnt = 0;
 80004ea:	4b26      	ldr	r3, [pc, #152]	; (8000584 <main+0xc0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
		  rgb[0] = pattern[0];
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <main+0xc4>)
 80004f2:	781a      	ldrb	r2, [r3, #0]
 80004f4:	4b25      	ldr	r3, [pc, #148]	; (800058c <main+0xc8>)
 80004f6:	701a      	strb	r2, [r3, #0]
		  rgb[1] = pattern[8];
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <main+0xc4>)
 80004fa:	7a1a      	ldrb	r2, [r3, #8]
 80004fc:	4b23      	ldr	r3, [pc, #140]	; (800058c <main+0xc8>)
 80004fe:	705a      	strb	r2, [r3, #1]
		  rgb[2] = pattern[16];
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <main+0xc4>)
 8000502:	7c1a      	ldrb	r2, [r3, #16]
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <main+0xc8>)
 8000506:	709a      	strb	r2, [r3, #2]
		  for (i = 1; i < 8; i++){
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <main+0xcc>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e02c      	b.n	800056a <main+0xa6>
			  rgb[0] = (rgb[0] << 1) + pattern[i];
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <main+0xc8>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <main+0xcc>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <main+0xc4>)
 8000520:	5c5b      	ldrb	r3, [r3, r1]
 8000522:	4413      	add	r3, r2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <main+0xc8>)
 8000528:	701a      	strb	r2, [r3, #0]
			  rgb[1] = (rgb[1] << 1) + pattern[(i+8)];
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <main+0xc8>)
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <main+0xcc>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3308      	adds	r3, #8
 8000538:	4913      	ldr	r1, [pc, #76]	; (8000588 <main+0xc4>)
 800053a:	5ccb      	ldrb	r3, [r1, r3]
 800053c:	4413      	add	r3, r2
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <main+0xc8>)
 8000542:	705a      	strb	r2, [r3, #1]
			  rgb[2] = (rgb[2] << 1) + pattern[(i+16)];
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <main+0xc8>)
 8000546:	789b      	ldrb	r3, [r3, #2]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <main+0xcc>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	3310      	adds	r3, #16
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <main+0xc4>)
 8000554:	5ccb      	ldrb	r3, [r1, r3]
 8000556:	4413      	add	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <main+0xc8>)
 800055c:	709a      	strb	r2, [r3, #2]
		  for (i = 1; i < 8; i++){
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0xcc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <main+0xcc>)
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0xcc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b07      	cmp	r3, #7
 8000570:	d9ce      	bls.n	8000510 <main+0x4c>
		  }
		  HAL_UART_Transmit(&huart1, rgb, 3 ,10);// Sending in normal mode
 8000572:	230a      	movs	r3, #10
 8000574:	2203      	movs	r2, #3
 8000576:	4905      	ldr	r1, [pc, #20]	; (800058c <main+0xc8>)
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <main+0xd0>)
 800057a:	f001 fdde 	bl	800213a <HAL_UART_Transmit>
	  if (cnt == 24){
 800057e:	e7b0      	b.n	80004e2 <main+0x1e>
 8000580:	20000028 	.word	0x20000028
 8000584:	200000cd 	.word	0x200000cd
 8000588:	200000b4 	.word	0x200000b4
 800058c:	200000d4 	.word	0x200000d4
 8000590:	200000d7 	.word	0x200000d7
 8000594:	20000070 	.word	0x20000070

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f93c 	bl	8002824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800060c:	23a8      	movs	r3, #168	; 0xa8
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fd71 	bl	8001104 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f930 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f000 ffd2 	bl	80015f4 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000656:	f000 f919 	bl	800088c <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_TIM2_Init+0x94>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_TIM2_Init+0x94>)
 8000692:	22a7      	movs	r2, #167	; 0xa7
 8000694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_TIM2_Init+0x94>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_TIM2_Init+0x94>)
 800069e:	f04f 32ff 	mov.w	r2, #4294967295
 80006a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_TIM2_Init+0x94>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_TIM2_Init+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <MX_TIM2_Init+0x94>)
 80006b2:	f001 f9bf 	bl	8001a34 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006bc:	f000 f8e6 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_TIM2_Init+0x94>)
 80006ce:	f001 fa69 	bl	8001ba4 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f8d8 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_TIM2_Init+0x94>)
 80006ea:	f001 fc5d 	bl	8001fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f8ca 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f001 fcb0 	bl	80020a0 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f8a1 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000070 	.word	0x20000070
 8000754:	40011000 	.word	0x40011000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_GPIO_Init+0x9c>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_GPIO_Init+0x9c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_GPIO_Init+0x9c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <MX_GPIO_Init+0x9c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x9c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c2:	2301      	movs	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_GPIO_Init+0xa0>)
 80007d8:	f000 fae0 	bl	8000d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2006      	movs	r0, #6
 80007e2:	f000 faa4 	bl	8000d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007e6:	2006      	movs	r0, #6
 80007e8:	f000 fabd 	bl	8000d66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400

080007fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d12d      	bne.n	8000868 <HAL_GPIO_EXTI_Callback+0x6c>
		timestamp = TIM2->CNT;
 800080c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <HAL_GPIO_EXTI_Callback+0x78>)
 8000814:	6013      	str	r3, [r2, #0]
		if (timestamp > 20) cnt = 0;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_GPIO_EXTI_Callback+0x78>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b14      	cmp	r3, #20
 800081c:	d902      	bls.n	8000824 <HAL_GPIO_EXTI_Callback+0x28>
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 8000824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
		idx = cnt % 24;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_GPIO_EXTI_Callback+0x7c>)
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_GPIO_EXTI_Callback+0x80>)
 8000832:	fba3 1302 	umull	r1, r3, r3, r2
 8000836:	0919      	lsrs	r1, r3, #4
 8000838:	460b      	mov	r3, r1
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	440b      	add	r3, r1
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_GPIO_EXTI_Callback+0x84>)
 8000846:	701a      	strb	r2, [r3, #0]
		pattern[idx] = (GPIOB->IDR & 0x01);
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_GPIO_EXTI_Callback+0x88>)
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <HAL_GPIO_EXTI_Callback+0x84>)
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_GPIO_EXTI_Callback+0x8c>)
 800085a:	5499      	strb	r1, [r3, r2]
		cnt = cnt + 1;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_GPIO_EXTI_Callback+0x7c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000866:	701a      	strb	r2, [r3, #0]
	}
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	200000d0 	.word	0x200000d0
 8000878:	200000cd 	.word	0x200000cd
 800087c:	aaaaaaab 	.word	0xaaaaaaab
 8000880:	200000cc 	.word	0x200000cc
 8000884:	40020400 	.word	0x40020400
 8000888:	200000b4 	.word	0x200000b4

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f8:	d10d      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_TIM_Base_MspInit+0x3c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <HAL_UART_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12c      	bne.n	80009a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x88>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000994:	2307      	movs	r3, #7
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0x8c>)
 80009a0:	f000 f9fc 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f898 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fb5f 	bl	80010d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6a:	f7ff ffd7 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f001 fee1 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fd27 	bl	80004c4 <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a84:	080028bc 	.word	0x080028bc
  ldr r2, =_sbss
 8000a88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a8c:	200000dc 	.word	0x200000dc

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f92b 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fee6 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f943 	bl	8000d82 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f90b 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000d8 	.word	0x200000d8

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200000d8 	.word	0x200000d8

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e16b      	b.n	8001090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 815a 	bne.w	800108a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d017      	beq.n	8000e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80b4 	beq.w	800108a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a5f      	ldr	r2, [pc, #380]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3e:	4a5b      	ldr	r2, [pc, #364]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_GPIO_Init+0x314>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d02b      	beq.n	8000fc2 <HAL_GPIO_Init+0x226>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x318>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d025      	beq.n	8000fbe <HAL_GPIO_Init+0x222>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <HAL_GPIO_Init+0x31c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x21e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x320>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <HAL_GPIO_Init+0x324>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x328>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x20a>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00e      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x310>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_GPIO_Init+0x334>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_GPIO_Init+0x334>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae90 	bls.w	8000db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fb82 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40013c00 	.word	0x40013c00

08001104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e267      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d075      	beq.n	800120e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d00c      	beq.n	8001148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112e:	4b85      	ldr	r3, [pc, #532]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001136:	2b08      	cmp	r3, #8
 8001138:	d112      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001146:	d10b      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d05b      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d157      	bne.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e242      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x74>
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a75      	ldr	r2, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0x98>
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6f      	ldr	r2, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6c      	ldr	r2, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a68      	ldr	r2, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a65      	ldr	r2, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fcd0 	bl	8000b60 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fccc 	bl	8000b60 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e207      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcbc 	bl	8000b60 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fcb8 	bl	8000b60 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1f3      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b51      	ldr	r3, [pc, #324]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e1c7      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4937      	ldr	r1, [pc, #220]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e03a      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_RCC_OscConfig+0x244>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fc71 	bl	8000b60 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fc6d 	bl	8000b60 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1a8      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4925      	ldr	r1, [pc, #148]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_OscConfig+0x244>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc50 	bl	8000b60 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc4c 	bl	8000b60 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e187      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d036      	beq.n	800135c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d016      	beq.n	8001324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x248>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fc30 	bl	8000b60 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fc2c 	bl	8000b60 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e167      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x200>
 8001322:	e01b      	b.n	800135c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_OscConfig+0x248>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fc19 	bl	8000b60 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	e00e      	b.n	8001350 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fc15 	bl	8000b60 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d907      	bls.n	8001350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e150      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
 800134c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ea      	bne.n	8001332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8097 	beq.w	8001498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b81      	ldr	r3, [pc, #516]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a7c      	ldr	r2, [pc, #496]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b77      	ldr	r3, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b74      	ldr	r3, [pc, #464]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a73      	ldr	r2, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbd5 	bl	8000b60 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fbd1 	bl	8000b60 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e10c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x2ea>
 80013e0:	4b64      	ldr	r3, [pc, #400]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a63      	ldr	r2, [pc, #396]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x30c>
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a5e      	ldr	r2, [pc, #376]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a5b      	ldr	r2, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 8001410:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a57      	ldr	r2, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	4b55      	ldr	r3, [pc, #340]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a54      	ldr	r2, [pc, #336]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d015      	beq.n	800145c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb96 	bl	8000b60 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fb92 	bl	8000b60 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0cb      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ee      	beq.n	8001438 <HAL_RCC_OscConfig+0x334>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fb80 	bl	8000b60 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fb7c 	bl	8000b60 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0b5      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a38      	ldr	r2, [pc, #224]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a1 	beq.w	80015e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d05c      	beq.n	8001568 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d141      	bne.n	800153a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_RCC_OscConfig+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb50 	bl	8000b60 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fb4c 	bl	8000b60 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e087      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x478>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb25 	bl	8000b60 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb21 	bl	8000b60 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e05c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x416>
 8001538:	e054      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x478>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb0e 	bl	8000b60 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb0a 	bl	8000b60 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e045      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x444>
 8001566:	e03d      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e038      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000
 800157c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4ec>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d028      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d11a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d111      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	3b01      	subs	r3, #1
 80015ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0cc      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d90c      	bls.n	8001630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b63      	ldr	r3, [pc, #396]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001648:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800166a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	494d      	ldr	r1, [pc, #308]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d044      	beq.n	8001714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e067      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4934      	ldr	r1, [pc, #208]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff fa3c 	bl	8000b60 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff fa38 	bl	8000b60 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e04f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 020c 	and.w	r2, r3, #12
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d1eb      	bne.n	80016ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e032      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4916      	ldr	r1, [pc, #88]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177a:	f000 f821 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	490a      	ldr	r1, [pc, #40]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f99c 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08002894 	.word	0x08002894
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	b094      	sub	sp, #80	; 0x50
 80017c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
 80017cc:	2300      	movs	r3, #0
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017d0:	2300      	movs	r3, #0
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d8:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d00d      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x40>
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	f200 80e1 	bhi.w	80019ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x3a>
 80017f2:	e0db      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017f8:	e0db      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017fa:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80017fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017fe:	e0d8      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001800:	4b6f      	ldr	r3, [pc, #444]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180a:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	2200      	movs	r2, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001820:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
 800182e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001832:	4622      	mov	r2, r4
 8001834:	462b      	mov	r3, r5
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0159      	lsls	r1, r3, #5
 8001840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001844:	0150      	lsls	r0, r2, #5
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4621      	mov	r1, r4
 800184c:	1a51      	subs	r1, r2, r1
 800184e:	6139      	str	r1, [r7, #16]
 8001850:	4629      	mov	r1, r5
 8001852:	eb63 0301 	sbc.w	r3, r3, r1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001864:	4659      	mov	r1, fp
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	4651      	mov	r1, sl
 800186a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186e:	4651      	mov	r1, sl
 8001870:	018a      	lsls	r2, r1, #6
 8001872:	4651      	mov	r1, sl
 8001874:	ebb2 0801 	subs.w	r8, r2, r1
 8001878:	4659      	mov	r1, fp
 800187a:	eb63 0901 	sbc.w	r9, r3, r1
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001892:	4690      	mov	r8, r2
 8001894:	4699      	mov	r9, r3
 8001896:	4623      	mov	r3, r4
 8001898:	eb18 0303 	adds.w	r3, r8, r3
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	462b      	mov	r3, r5
 80018a0:	eb49 0303 	adc.w	r3, r9, r3
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018b2:	4629      	mov	r1, r5
 80018b4:	024b      	lsls	r3, r1, #9
 80018b6:	4621      	mov	r1, r4
 80018b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018bc:	4621      	mov	r1, r4
 80018be:	024a      	lsls	r2, r1, #9
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c6:	2200      	movs	r2, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018d0:	f7fe fc7a 	bl	80001c8 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018dc:	e058      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	4611      	mov	r1, r2
 80018ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ee:	623b      	str	r3, [r7, #32]
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
 80018f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f8:	4642      	mov	r2, r8
 80018fa:	464b      	mov	r3, r9
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	0159      	lsls	r1, r3, #5
 8001906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190a:	0150      	lsls	r0, r2, #5
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4641      	mov	r1, r8
 8001912:	ebb2 0a01 	subs.w	sl, r2, r1
 8001916:	4649      	mov	r1, r9
 8001918:	eb63 0b01 	sbc.w	fp, r3, r1
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800192c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001930:	ebb2 040a 	subs.w	r4, r2, sl
 8001934:	eb63 050b 	sbc.w	r5, r3, fp
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	00eb      	lsls	r3, r5, #3
 8001942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	4643      	mov	r3, r8
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	464b      	mov	r3, r9
 8001954:	eb45 0303 	adc.w	r3, r5, r3
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197a:	2200      	movs	r2, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	61fa      	str	r2, [r7, #28]
 8001980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001984:	f7fe fc20 	bl	80001c8 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3750      	adds	r7, #80	; 0x50
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff0 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	080028a4 	.word	0x080028a4

08001a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a10:	f7ff ffdc 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0b5b      	lsrs	r3, r3, #13
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4903      	ldr	r1, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	080028a4 	.word	0x080028a4

08001a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e041      	b.n	8001aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe ff44 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f000 f95e 	bl	8001d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e046      	b.n	8001b7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_TIM_Base_Start+0xb4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d022      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b06:	d01d      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_TIM_Base_Start+0xb8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d018      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_TIM_Base_Start+0xbc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_TIM_Base_Start+0xc0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00e      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_TIM_Base_Start+0xc4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_TIM_Base_Start+0xc8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_TIM_Base_Start+0x70>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_TIM_Base_Start+0xcc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d010      	beq.n	8001b78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b66:	e007      	b.n	8001b78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40000c00 	.word	0x40000c00
 8001b98:	40010400 	.word	0x40010400
 8001b9c:	40014000 	.word	0x40014000
 8001ba0:	40001800 	.word	0x40001800

08001ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e0b4      	b.n	8001d2a <HAL_TIM_ConfigClockSource+0x186>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf8:	d03e      	beq.n	8001c78 <HAL_TIM_ConfigClockSource+0xd4>
 8001bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfe:	f200 8087 	bhi.w	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c06:	f000 8086 	beq.w	8001d16 <HAL_TIM_ConfigClockSource+0x172>
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0e:	d87f      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c10:	2b70      	cmp	r3, #112	; 0x70
 8001c12:	d01a      	beq.n	8001c4a <HAL_TIM_ConfigClockSource+0xa6>
 8001c14:	2b70      	cmp	r3, #112	; 0x70
 8001c16:	d87b      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c18:	2b60      	cmp	r3, #96	; 0x60
 8001c1a:	d050      	beq.n	8001cbe <HAL_TIM_ConfigClockSource+0x11a>
 8001c1c:	2b60      	cmp	r3, #96	; 0x60
 8001c1e:	d877      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c20:	2b50      	cmp	r3, #80	; 0x50
 8001c22:	d03c      	beq.n	8001c9e <HAL_TIM_ConfigClockSource+0xfa>
 8001c24:	2b50      	cmp	r3, #80	; 0x50
 8001c26:	d873      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d058      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x13a>
 8001c2c:	2b40      	cmp	r3, #64	; 0x40
 8001c2e:	d86f      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c30:	2b30      	cmp	r3, #48	; 0x30
 8001c32:	d064      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0x15a>
 8001c34:	2b30      	cmp	r3, #48	; 0x30
 8001c36:	d86b      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d060      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0x15a>
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d867      	bhi.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05c      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0x15a>
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d05a      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0x15a>
 8001c48:	e062      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f000 f985 	bl	8001f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	609a      	str	r2, [r3, #8]
      break;
 8001c76:	e04f      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f000 f96e 	bl	8001f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c9a:	609a      	str	r2, [r3, #8]
      break;
 8001c9c:	e03c      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6859      	ldr	r1, [r3, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f000 f8e2 	bl	8001e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2150      	movs	r1, #80	; 0x50
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f93b 	bl	8001f32 <TIM_ITRx_SetConfig>
      break;
 8001cbc:	e02c      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f000 f901 	bl	8001ed2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2160      	movs	r1, #96	; 0x60
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f92b 	bl	8001f32 <TIM_ITRx_SetConfig>
      break;
 8001cdc:	e01c      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	461a      	mov	r2, r3
 8001cec:	f000 f8c2 	bl	8001e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f91b 	bl	8001f32 <TIM_ITRx_SetConfig>
      break;
 8001cfc:	e00c      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f000 f912 	bl	8001f32 <TIM_ITRx_SetConfig>
      break;
 8001d0e:	e003      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      break;
 8001d14:	e000      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a40      	ldr	r2, [pc, #256]	; (8001e48 <TIM_Base_SetConfig+0x114>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <TIM_Base_SetConfig+0x40>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d52:	d00f      	beq.n	8001d74 <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3d      	ldr	r2, [pc, #244]	; (8001e4c <TIM_Base_SetConfig+0x118>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00b      	beq.n	8001d74 <TIM_Base_SetConfig+0x40>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3c      	ldr	r2, [pc, #240]	; (8001e50 <TIM_Base_SetConfig+0x11c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <TIM_Base_SetConfig+0x40>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3b      	ldr	r2, [pc, #236]	; (8001e54 <TIM_Base_SetConfig+0x120>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d003      	beq.n	8001d74 <TIM_Base_SetConfig+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <TIM_Base_SetConfig+0x124>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a2f      	ldr	r2, [pc, #188]	; (8001e48 <TIM_Base_SetConfig+0x114>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d02b      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d027      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <TIM_Base_SetConfig+0x118>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d023      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <TIM_Base_SetConfig+0x11c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <TIM_Base_SetConfig+0x120>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01b      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <TIM_Base_SetConfig+0x124>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d017      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <TIM_Base_SetConfig+0x128>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <TIM_Base_SetConfig+0x12c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00f      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <TIM_Base_SetConfig+0x130>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00b      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <TIM_Base_SetConfig+0x134>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <TIM_Base_SetConfig+0x138>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <TIM_Base_SetConfig+0x13c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d108      	bne.n	8001df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <TIM_Base_SetConfig+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d003      	beq.n	8001e2c <TIM_Base_SetConfig+0xf8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <TIM_Base_SetConfig+0x124>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d103      	bne.n	8001e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	615a      	str	r2, [r3, #20]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00
 8001e58:	40010400 	.word	0x40010400
 8001e5c:	40014000 	.word	0x40014000
 8001e60:	40014400 	.word	0x40014400
 8001e64:	40014800 	.word	0x40014800
 8001e68:	40001800 	.word	0x40001800
 8001e6c:	40001c00 	.word	0x40001c00
 8001e70:	40002000 	.word	0x40002000

08001e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f023 0201 	bic.w	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f023 030a 	bic.w	r3, r3, #10
 8001eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	621a      	str	r2, [r3, #32]
}
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b087      	sub	sp, #28
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	f023 0210 	bic.w	r2, r3, #16
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	031b      	lsls	r3, r3, #12
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f043 0307 	orr.w	r3, r3, #7
 8001f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e05a      	b.n	8002076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d022      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d01d      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d018      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00e      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10c      	bne.n	8002064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4313      	orrs	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40010000 	.word	0x40010000
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00
 8002094:	40010400 	.word	0x40010400
 8002098:	40014000 	.word	0x40014000
 800209c:	40001800 	.word	0x40001800

080020a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e03f      	b.n	8002132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fc2e 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f929 	bl	800233c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b08a      	sub	sp, #40	; 0x28
 800213e:	af02      	add	r7, sp, #8
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	d17c      	bne.n	8002254 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_UART_Transmit+0x2c>
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e075      	b.n	8002256 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_UART_Transmit+0x3e>
 8002174:	2302      	movs	r3, #2
 8002176:	e06e      	b.n	8002256 <HAL_UART_Transmit+0x11c>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2221      	movs	r2, #33	; 0x21
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800218e:	f7fe fce7 	bl	8000b60 <HAL_GetTick>
 8002192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a8:	d108      	bne.n	80021bc <HAL_UART_Transmit+0x82>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	e003      	b.n	80021c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021cc:	e02a      	b.n	8002224 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f840 	bl	800225e <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e036      	b.n	8002256 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	3302      	adds	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e007      	b.n	8002216 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3301      	adds	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1cf      	bne.n	80021ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f810 	bl	800225e <UART_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e006      	b.n	8002256 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b090      	sub	sp, #64	; 0x40
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4613      	mov	r3, r2
 800226c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226e:	e050      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d04c      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <UART_WaitOnFlagUntilTimeout+0x30>
 800227e:	f7fe fc6f 	bl	8000b60 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800228a:	429a      	cmp	r2, r3
 800228c:	d241      	bcs.n	8002312 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	e853 3f00 	ldrex	r3, [r3]
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	330c      	adds	r3, #12
 80022ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ae:	637a      	str	r2, [r7, #52]	; 0x34
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b6:	e841 2300 	strex	r3, r2, [r1]
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e5      	bne.n	800228e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3314      	adds	r3, #20
 80022c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	613b      	str	r3, [r7, #16]
   return(result);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3314      	adds	r3, #20
 80022e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e2:	623a      	str	r2, [r7, #32]
 80022e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	69f9      	ldr	r1, [r7, #28]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e5      	bne.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e00f      	b.n	8002332 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4013      	ands	r3, r2
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	bf0c      	ite	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	2300      	movne	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	429a      	cmp	r2, r3
 800232e:	d09f      	beq.n	8002270 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3740      	adds	r7, #64	; 0x40
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800233c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002340:	b0c0      	sub	sp, #256	; 0x100
 8002342:	af00      	add	r7, sp, #0
 8002344:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	ea40 0301 	orr.w	r3, r0, r1
 8002364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	431a      	orrs	r2, r3
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	431a      	orrs	r2, r3
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002394:	f021 010c 	bic.w	r1, r1, #12
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023a2:	430b      	orrs	r3, r1
 80023a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	6999      	ldr	r1, [r3, #24]
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	ea40 0301 	orr.w	r3, r0, r1
 80023c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <UART_SetConfig+0x2cc>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d005      	beq.n	80023dc <UART_SetConfig+0xa0>
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b8d      	ldr	r3, [pc, #564]	; (800260c <UART_SetConfig+0x2d0>)
 80023d8:	429a      	cmp	r2, r3
 80023da:	d104      	bne.n	80023e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023dc:	f7ff fb16 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80023e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023e4:	e003      	b.n	80023ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023e6:	f7ff fafd 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80023ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f8:	f040 810c 	bne.w	8002614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002400:	2200      	movs	r2, #0
 8002402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002406:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800240a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800240e:	4622      	mov	r2, r4
 8002410:	462b      	mov	r3, r5
 8002412:	1891      	adds	r1, r2, r2
 8002414:	65b9      	str	r1, [r7, #88]	; 0x58
 8002416:	415b      	adcs	r3, r3
 8002418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800241e:	4621      	mov	r1, r4
 8002420:	eb12 0801 	adds.w	r8, r2, r1
 8002424:	4629      	mov	r1, r5
 8002426:	eb43 0901 	adc.w	r9, r3, r1
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800243a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800243e:	4690      	mov	r8, r2
 8002440:	4699      	mov	r9, r3
 8002442:	4623      	mov	r3, r4
 8002444:	eb18 0303 	adds.w	r3, r8, r3
 8002448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800244c:	462b      	mov	r3, r5
 800244e:	eb49 0303 	adc.w	r3, r9, r3
 8002452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002462:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800246a:	460b      	mov	r3, r1
 800246c:	18db      	adds	r3, r3, r3
 800246e:	653b      	str	r3, [r7, #80]	; 0x50
 8002470:	4613      	mov	r3, r2
 8002472:	eb42 0303 	adc.w	r3, r2, r3
 8002476:	657b      	str	r3, [r7, #84]	; 0x54
 8002478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800247c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002480:	f7fd fea2 	bl	80001c8 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4b61      	ldr	r3, [pc, #388]	; (8002610 <UART_SetConfig+0x2d4>)
 800248a:	fba3 2302 	umull	r2, r3, r3, r2
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	011c      	lsls	r4, r3, #4
 8002492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002496:	2200      	movs	r2, #0
 8002498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800249c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024a4:	4642      	mov	r2, r8
 80024a6:	464b      	mov	r3, r9
 80024a8:	1891      	adds	r1, r2, r2
 80024aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80024ac:	415b      	adcs	r3, r3
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024b4:	4641      	mov	r1, r8
 80024b6:	eb12 0a01 	adds.w	sl, r2, r1
 80024ba:	4649      	mov	r1, r9
 80024bc:	eb43 0b01 	adc.w	fp, r3, r1
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d4:	4692      	mov	sl, r2
 80024d6:	469b      	mov	fp, r3
 80024d8:	4643      	mov	r3, r8
 80024da:	eb1a 0303 	adds.w	r3, sl, r3
 80024de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024e2:	464b      	mov	r3, r9
 80024e4:	eb4b 0303 	adc.w	r3, fp, r3
 80024e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002500:	460b      	mov	r3, r1
 8002502:	18db      	adds	r3, r3, r3
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
 8002506:	4613      	mov	r3, r2
 8002508:	eb42 0303 	adc.w	r3, r2, r3
 800250c:	647b      	str	r3, [r7, #68]	; 0x44
 800250e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002516:	f7fd fe57 	bl	80001c8 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4611      	mov	r1, r2
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <UART_SetConfig+0x2d4>)
 8002522:	fba3 2301 	umull	r2, r3, r3, r1
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2264      	movs	r2, #100	; 0x64
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	1acb      	subs	r3, r1, r3
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <UART_SetConfig+0x2d4>)
 8002538:	fba3 2302 	umull	r2, r3, r3, r2
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002544:	441c      	add	r4, r3
 8002546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002550:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	1891      	adds	r1, r2, r2
 800255e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002560:	415b      	adcs	r3, r3
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002568:	4641      	mov	r1, r8
 800256a:	1851      	adds	r1, r2, r1
 800256c:	6339      	str	r1, [r7, #48]	; 0x30
 800256e:	4649      	mov	r1, r9
 8002570:	414b      	adcs	r3, r1
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002580:	4659      	mov	r1, fp
 8002582:	00cb      	lsls	r3, r1, #3
 8002584:	4651      	mov	r1, sl
 8002586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258a:	4651      	mov	r1, sl
 800258c:	00ca      	lsls	r2, r1, #3
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	4603      	mov	r3, r0
 8002594:	4642      	mov	r2, r8
 8002596:	189b      	adds	r3, r3, r2
 8002598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800259c:	464b      	mov	r3, r9
 800259e:	460a      	mov	r2, r1
 80025a0:	eb42 0303 	adc.w	r3, r2, r3
 80025a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025bc:	460b      	mov	r3, r1
 80025be:	18db      	adds	r3, r3, r3
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c2:	4613      	mov	r3, r2
 80025c4:	eb42 0303 	adc.w	r3, r2, r3
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025d2:	f7fd fdf9 	bl	80001c8 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <UART_SetConfig+0x2d4>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	3332      	adds	r3, #50	; 0x32
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <UART_SetConfig+0x2d4>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	f003 0207 	and.w	r2, r3, #7
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4422      	add	r2, r4
 8002602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002604:	e106      	b.n	8002814 <UART_SetConfig+0x4d8>
 8002606:	bf00      	nop
 8002608:	40011000 	.word	0x40011000
 800260c:	40011400 	.word	0x40011400
 8002610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002618:	2200      	movs	r2, #0
 800261a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800261e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002626:	4642      	mov	r2, r8
 8002628:	464b      	mov	r3, r9
 800262a:	1891      	adds	r1, r2, r2
 800262c:	6239      	str	r1, [r7, #32]
 800262e:	415b      	adcs	r3, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002636:	4641      	mov	r1, r8
 8002638:	1854      	adds	r4, r2, r1
 800263a:	4649      	mov	r1, r9
 800263c:	eb43 0501 	adc.w	r5, r3, r1
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4643      	mov	r3, r8
 8002656:	18e3      	adds	r3, r4, r3
 8002658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800265c:	464b      	mov	r3, r9
 800265e:	eb45 0303 	adc.w	r3, r5, r3
 8002662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002682:	4629      	mov	r1, r5
 8002684:	008b      	lsls	r3, r1, #2
 8002686:	4621      	mov	r1, r4
 8002688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800268c:	4621      	mov	r1, r4
 800268e:	008a      	lsls	r2, r1, #2
 8002690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002694:	f7fd fd98 	bl	80001c8 <__aeabi_uldivmod>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4b60      	ldr	r3, [pc, #384]	; (8002820 <UART_SetConfig+0x4e4>)
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	011c      	lsls	r4, r3, #4
 80026a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	1891      	adds	r1, r2, r2
 80026be:	61b9      	str	r1, [r7, #24]
 80026c0:	415b      	adcs	r3, r3
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c8:	4641      	mov	r1, r8
 80026ca:	1851      	adds	r1, r2, r1
 80026cc:	6139      	str	r1, [r7, #16]
 80026ce:	4649      	mov	r1, r9
 80026d0:	414b      	adcs	r3, r1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e0:	4659      	mov	r1, fp
 80026e2:	00cb      	lsls	r3, r1, #3
 80026e4:	4651      	mov	r1, sl
 80026e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ea:	4651      	mov	r1, sl
 80026ec:	00ca      	lsls	r2, r1, #3
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	4642      	mov	r2, r8
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026fc:	464b      	mov	r3, r9
 80026fe:	460a      	mov	r2, r1
 8002700:	eb42 0303 	adc.w	r3, r2, r3
 8002704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	67bb      	str	r3, [r7, #120]	; 0x78
 8002712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002720:	4649      	mov	r1, r9
 8002722:	008b      	lsls	r3, r1, #2
 8002724:	4641      	mov	r1, r8
 8002726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800272a:	4641      	mov	r1, r8
 800272c:	008a      	lsls	r2, r1, #2
 800272e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002732:	f7fd fd49 	bl	80001c8 <__aeabi_uldivmod>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4611      	mov	r1, r2
 800273c:	4b38      	ldr	r3, [pc, #224]	; (8002820 <UART_SetConfig+0x4e4>)
 800273e:	fba3 2301 	umull	r2, r3, r3, r1
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2264      	movs	r2, #100	; 0x64
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	1acb      	subs	r3, r1, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a33      	ldr	r2, [pc, #204]	; (8002820 <UART_SetConfig+0x4e4>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	441c      	add	r4, r3
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	2200      	movs	r2, #0
 8002764:	673b      	str	r3, [r7, #112]	; 0x70
 8002766:	677a      	str	r2, [r7, #116]	; 0x74
 8002768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	415b      	adcs	r3, r3
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800277c:	4641      	mov	r1, r8
 800277e:	1851      	adds	r1, r2, r1
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	4649      	mov	r1, r9
 8002784:	414b      	adcs	r3, r1
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002794:	4659      	mov	r1, fp
 8002796:	00cb      	lsls	r3, r1, #3
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279e:	4651      	mov	r1, sl
 80027a0:	00ca      	lsls	r2, r1, #3
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	4642      	mov	r2, r8
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ae:	464b      	mov	r3, r9
 80027b0:	460a      	mov	r2, r1
 80027b2:	eb42 0303 	adc.w	r3, r2, r3
 80027b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	663b      	str	r3, [r7, #96]	; 0x60
 80027c2:	667a      	str	r2, [r7, #100]	; 0x64
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027d0:	4649      	mov	r1, r9
 80027d2:	008b      	lsls	r3, r1, #2
 80027d4:	4641      	mov	r1, r8
 80027d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027da:	4641      	mov	r1, r8
 80027dc:	008a      	lsls	r2, r1, #2
 80027de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027e2:	f7fd fcf1 	bl	80001c8 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <UART_SetConfig+0x4e4>)
 80027ec:	fba3 1302 	umull	r1, r3, r3, r2
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	2164      	movs	r1, #100	; 0x64
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	3332      	adds	r3, #50	; 0x32
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <UART_SetConfig+0x4e4>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4422      	add	r2, r4
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800281a:	46bd      	mov	sp, r7
 800281c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002820:	51eb851f 	.word	0x51eb851f

08002824 <memset>:
 8002824:	4402      	add	r2, r0
 8002826:	4603      	mov	r3, r0
 8002828:	4293      	cmp	r3, r2
 800282a:	d100      	bne.n	800282e <memset+0xa>
 800282c:	4770      	bx	lr
 800282e:	f803 1b01 	strb.w	r1, [r3], #1
 8002832:	e7f9      	b.n	8002828 <memset+0x4>

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4d0d      	ldr	r5, [pc, #52]	; (800286c <__libc_init_array+0x38>)
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	2600      	movs	r6, #0
 8002840:	42a6      	cmp	r6, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	4d0b      	ldr	r5, [pc, #44]	; (8002874 <__libc_init_array+0x40>)
 8002846:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <__libc_init_array+0x44>)
 8002848:	f000 f818 	bl	800287c <_init>
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	2600      	movs	r6, #0
 8002852:	42a6      	cmp	r6, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f855 3b04 	ldr.w	r3, [r5], #4
 800285c:	4798      	blx	r3
 800285e:	3601      	adds	r6, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f855 3b04 	ldr.w	r3, [r5], #4
 8002866:	4798      	blx	r3
 8002868:	3601      	adds	r6, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	080028b4 	.word	0x080028b4
 8002870:	080028b4 	.word	0x080028b4
 8002874:	080028b4 	.word	0x080028b4
 8002878:	080028b8 	.word	0x080028b8

0800287c <_init>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	bf00      	nop
 8002880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002882:	bc08      	pop	{r3}
 8002884:	469e      	mov	lr, r3
 8002886:	4770      	bx	lr

08002888 <_fini>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr
