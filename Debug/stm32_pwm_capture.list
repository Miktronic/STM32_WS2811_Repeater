
stm32_pwm_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004118  08004118  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004120  08004120  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00019368  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019378  20019378  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ca6b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bfa  00000000  00000000  0002caee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c40  00000000  00000000  0002e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a5  00000000  00000000  0002f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020174  00000000  00000000  0002fccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e093  00000000  00000000  0004fe41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7102  00000000  00000000  0005ded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000033f0  00000000  00000000  00124fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001283c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040e0 	.word	0x080040e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080040e0 	.word	0x080040e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Set_LED>:

uint8_t ignore_flag = 0;
uint8_t captured_flag = 0;

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	b2d9      	uxtb	r1, r3
 80004d6:	4a11      	ldr	r2, [pc, #68]	; (800051c <Set_LED+0x58>)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Red;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	b2d9      	uxtb	r1, r3
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <Set_LED+0x58>)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4413      	add	r3, r2
 80004ea:	460a      	mov	r2, r1
 80004ec:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Green;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	b2d9      	uxtb	r1, r3
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <Set_LED+0x58>)
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	460a      	mov	r2, r1
 80004fc:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b2d9      	uxtb	r1, r3
 8000502:	4a06      	ldr	r2, [pc, #24]	; (800051c <Set_LED+0x58>)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	70da      	strb	r2, [r3, #3]
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2000c870 	.word	0x2000c870

08000520 <Set_RGB>:

void Set_RGB (uint8_t LEDnum, uint8_t *pat)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]

	rgb[LEDnum][0] = *pat;
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	7818      	ldrb	r0, [r3, #0]
 8000532:	493c      	ldr	r1, [pc, #240]	; (8000624 <Set_RGB+0x104>)
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	440b      	add	r3, r1
 800053c:	4602      	mov	r2, r0
 800053e:	701a      	strb	r2, [r3, #0]
	rgb[LEDnum][1] = *(pat + 8);
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	7a18      	ldrb	r0, [r3, #8]
 8000546:	4937      	ldr	r1, [pc, #220]	; (8000624 <Set_RGB+0x104>)
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	440b      	add	r3, r1
 8000550:	3301      	adds	r3, #1
 8000552:	4602      	mov	r2, r0
 8000554:	701a      	strb	r2, [r3, #0]
	rgb[LEDnum][2] = *(pat + 16);
 8000556:	79fa      	ldrb	r2, [r7, #7]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	7c18      	ldrb	r0, [r3, #16]
 800055c:	4931      	ldr	r1, [pc, #196]	; (8000624 <Set_RGB+0x104>)
 800055e:	4613      	mov	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4413      	add	r3, r2
 8000564:	440b      	add	r3, r1
 8000566:	3302      	adds	r3, #2
 8000568:	4602      	mov	r2, r0
 800056a:	701a      	strb	r2, [r3, #0]
	for (int k = 1; k < 8; k++){
 800056c:	2301      	movs	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e04d      	b.n	800060e <Set_RGB+0xee>
		rgb[LEDnum][0] = (rgb[LEDnum][0] << 1) + *(pat + k);
 8000572:	79fa      	ldrb	r2, [r7, #7]
 8000574:	492b      	ldr	r1, [pc, #172]	; (8000624 <Set_RGB+0x104>)
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	440b      	add	r3, r1
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	b2d9      	uxtb	r1, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	79fa      	ldrb	r2, [r7, #7]
 800058e:	440b      	add	r3, r1
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	4924      	ldr	r1, [pc, #144]	; (8000624 <Set_RGB+0x104>)
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	440b      	add	r3, r1
 800059c:	4602      	mov	r2, r0
 800059e:	701a      	strb	r2, [r3, #0]
		rgb[LEDnum][1] = (rgb[LEDnum][1] << 1) + *(pat + k + 8);
 80005a0:	79fa      	ldrb	r2, [r7, #7]
 80005a2:	4920      	ldr	r1, [pc, #128]	; (8000624 <Set_RGB+0x104>)
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	440b      	add	r3, r1
 80005ac:	3301      	adds	r3, #1
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	b2d9      	uxtb	r1, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3308      	adds	r3, #8
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	440b      	add	r3, r1
 80005c2:	b2d8      	uxtb	r0, r3
 80005c4:	4917      	ldr	r1, [pc, #92]	; (8000624 <Set_RGB+0x104>)
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	440b      	add	r3, r1
 80005ce:	3301      	adds	r3, #1
 80005d0:	4602      	mov	r2, r0
 80005d2:	701a      	strb	r2, [r3, #0]
		rgb[LEDnum][2] = (rgb[LEDnum][2] << 1) + *(pat + k + 16);
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	4913      	ldr	r1, [pc, #76]	; (8000624 <Set_RGB+0x104>)
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	440b      	add	r3, r1
 80005e0:	3302      	adds	r3, #2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	b2d9      	uxtb	r1, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3310      	adds	r3, #16
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	440b      	add	r3, r1
 80005f6:	b2d8      	uxtb	r0, r3
 80005f8:	490a      	ldr	r1, [pc, #40]	; (8000624 <Set_RGB+0x104>)
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	440b      	add	r3, r1
 8000602:	3302      	adds	r3, #2
 8000604:	4602      	mov	r2, r0
 8000606:	701a      	strb	r2, [r3, #0]
	for (int k = 1; k < 8; k++){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b07      	cmp	r3, #7
 8000612:	ddae      	ble.n	8000572 <Set_RGB+0x52>
	}
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	2000bcb8 	.word	0x2000bcb8

08000628 <WS2812_Send>:
void WS2812_Send (void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
	uint32_t color;

	if (datasentflag == 1)
 8000632:	4b32      	ldr	r3, [pc, #200]	; (80006fc <WS2812_Send+0xd4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d15b      	bne.n	80006f2 <WS2812_Send+0xca>
	{

		datasentflag = 0;
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <WS2812_Send+0xd4>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
		for (int i= 0; i<LED_NUMBER; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e037      	b.n	80006b6 <WS2812_Send+0x8e>
		{
			#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
			#else
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000646:	4a2e      	ldr	r2, [pc, #184]	; (8000700 <WS2812_Send+0xd8>)
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	041a      	lsls	r2, r3, #16
 8000652:	492b      	ldr	r1, [pc, #172]	; (8000700 <WS2812_Send+0xd8>)
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	440b      	add	r3, r1
 800065a:	789b      	ldrb	r3, [r3, #2]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	431a      	orrs	r2, r3
 8000660:	4927      	ldr	r1, [pc, #156]	; (8000700 <WS2812_Send+0xd8>)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	78db      	ldrb	r3, [r3, #3]
 800066a:	4313      	orrs	r3, r2
 800066c:	607b      	str	r3, [r7, #4]
			#endif

				for (int i=23; i>=0; i--)
 800066e:	2317      	movs	r3, #23
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	e01a      	b.n	80006aa <WS2812_Send+0x82>
				{
					if (color&(1<<i))
 8000674:	2201      	movs	r2, #1
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4013      	ands	r3, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <WS2812_Send+0x6c>
					{
						pwmData[indx] = 336;  // 4/5 of 420
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <WS2812_Send+0xdc>)
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000692:	e004      	b.n	800069e <WS2812_Send+0x76>
					}

					else pwmData[indx] = 84;  // 1/5 of 420
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <WS2812_Send+0xdc>)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2154      	movs	r1, #84	; 0x54
 800069a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					indx++;
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
				for (int i=23; i>=0; i--)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dae1      	bge.n	8000674 <WS2812_Send+0x4c>
		for (int i= 0; i<LED_NUMBER; i++)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	3301      	adds	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <WS2812_Send+0xe0>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	4293      	cmp	r3, r2
 80006c0:	dbc1      	blt.n	8000646 <WS2812_Send+0x1e>
				}

		}

		for (int i=0; i<10; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	e00a      	b.n	80006de <WS2812_Send+0xb6>
		{
			pwmData[indx] = 0;
 80006c8:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <WS2812_Send+0xdc>)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2100      	movs	r1, #0
 80006ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
		for (int i=0; i<10; i++)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3301      	adds	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	ddf1      	ble.n	80006c8 <WS2812_Send+0xa0>
		}

		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <WS2812_Send+0xdc>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <WS2812_Send+0xe4>)
 80006ee:	f002 f923 	bl	8002938 <HAL_TIM_PWM_Start_DMA>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	2000c870 	.word	0x2000c870
 8000704:	2000d80c 	.word	0x2000d80c
 8000708:	20000160 	.word	0x20000160
 800070c:	2000002c 	.word	0x2000002c

08000710 <filter>:

void filter(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
	ignore_flag = 1;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <filter+0x68>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < (24 * LED_NUMBER); i++){
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	e018      	b.n	8000754 <filter+0x44>
		if(prev_pattern[i] != pattern[i]){
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <filter+0x6c>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	4915      	ldr	r1, [pc, #84]	; (8000780 <filter+0x70>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	440b      	add	r3, r1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d002      	beq.n	800073c <filter+0x2c>
			ignore_flag = 0;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <filter+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
		}
		prev_pattern[i] = pattern[i];
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <filter+0x70>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <filter+0x6c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < (24 * LED_NUMBER); i++){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <filter+0x74>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4293      	cmp	r3, r2
 8000768:	dbdb      	blt.n	8000722 <filter+0x12>
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	20019370 	.word	0x20019370
 800077c:	20000164 	.word	0x20000164
 8000780:	20005f0c 	.word	0x20005f0c
 8000784:	20000160 	.word	0x20000160

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078e:	f000 fc5f 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f881 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fa1f 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800079a:	f000 f9fd 	bl	8000b98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800079e:	f000 f9d1 	bl	8000b44 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007a2:	f000 f983 	bl	8000aac <MX_TIM2_Init>
  MX_TIM1_Init();
 80007a6:	f000 f8e1 	bl	800096c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80007aa:	4832      	ldr	r0, [pc, #200]	; (8000874 <main+0xec>)
 80007ac:	f002 f802 	bl	80027b4 <HAL_TIM_Base_Start>
  LED_NUMBER = MAX_LED;
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <main+0xf0>)
 80007b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007b6:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captured_flag){
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <main+0xf4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d041      	beq.n	8000844 <main+0xbc>
		  captured_flag = 0;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <main+0xf4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		  filter();
 80007c6:	f7ff ffa3 	bl	8000710 <filter>
		  if (ignore_flag == 0){
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <main+0xf8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d138      	bne.n	8000844 <main+0xbc>
			  for (int i = 0; i < LED_NUMBER; i++){
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e02d      	b.n	8000834 <main+0xac>
				  Set_RGB(i, &pattern[(24 * i)]);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b2d8      	uxtb	r0, r3
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <main+0xfc>)
 80007ea:	4413      	add	r3, r2
 80007ec:	4619      	mov	r1, r3
 80007ee:	f7ff fe97 	bl	8000520 <Set_RGB>
				  Set_LED(i, rgb[i][0], rgb[i][1], rgb[i][2]);
 80007f2:	4925      	ldr	r1, [pc, #148]	; (8000888 <main+0x100>)
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	4921      	ldr	r1, [pc, #132]	; (8000888 <main+0x100>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	440b      	add	r3, r1
 800080e:	3301      	adds	r3, #1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461c      	mov	r4, r3
 8000814:	491c      	ldr	r1, [pc, #112]	; (8000888 <main+0x100>)
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	440b      	add	r3, r1
 8000820:	3302      	adds	r3, #2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4622      	mov	r2, r4
 8000826:	4601      	mov	r1, r0
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fe4b 	bl	80004c4 <Set_LED>
			  for (int i = 0; i < LED_NUMBER; i++){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <main+0xf0>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4293      	cmp	r3, r2
 800083e:	dbcb      	blt.n	80007d8 <main+0x50>
			  }
			  //HAL_UART_Transmit(&huart1, &rgb[0][0], (LED_NUMBER * 3) ,10);// Sending in normal mode
			  //HAL_UART_Transmit(&huart1, &LED_NUMBER, 2 ,10);// Sending in normal mode
			  WS2812_Send();
 8000840:	f7ff fef2 	bl	8000628 <WS2812_Send>
		  }
	  }

	  if (timestamp > 30) { //if the reset code is detected
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <main+0x104>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b1e      	cmp	r3, #30
 800084a:	d9b5      	bls.n	80007b8 <main+0x30>
		  timestamp = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <main+0x104>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
		  LED_NUMBER = cnt / 24;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <main+0x108>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <main+0x10c>)
 8000858:	fba2 2303 	umull	r2, r3, r2, r3
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <main+0xf0>)
 8000862:	801a      	strh	r2, [r3, #0]
		  cnt = 0;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <main+0x108>)
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
		  captured_flag = 1;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <main+0xf4>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
	  if (captured_flag){
 8000870:	e7a2      	b.n	80007b8 <main+0x30>
 8000872:	bf00      	nop
 8000874:	20000074 	.word	0x20000074
 8000878:	20000160 	.word	0x20000160
 800087c:	20019371 	.word	0x20019371
 8000880:	20019370 	.word	0x20019370
 8000884:	20005f0c 	.word	0x20005f0c
 8000888:	2000bcb8 	.word	0x2000bcb8
 800088c:	2000bcb4 	.word	0x2000bcb4
 8000890:	20000162 	.word	0x20000162
 8000894:	aaaaaaab 	.word	0xaaaaaaab

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fbee 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800090c:	23a8      	movs	r3, #168	; 0xa8
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fa61 	bl	8001de4 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000928:	f000 fa02 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2105      	movs	r1, #5
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fcc2 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000956:	f000 f9eb 	bl	8000d30 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	; 0x58
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fb6f 	bl	8004088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009aa:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009ac:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <MX_TIM1_Init+0x13c>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 420-1;
 80009bc:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009be:	f240 12a3 	movw	r2, #419	; 0x1a3
 80009c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ca:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d6:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009d8:	f001 fe9c 	bl	8002714 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009e2:	f000 f9a5 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009f0:	4619      	mov	r1, r3
 80009f2:	482c      	ldr	r0, [pc, #176]	; (8000aa4 <MX_TIM1_Init+0x138>)
 80009f4:	f002 fafc 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009fe:	f000 f997 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a02:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <MX_TIM1_Init+0x138>)
 8000a04:	f001 ff3e 	bl	8002884 <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a0e:	f000 f98f 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_TIM1_Init+0x138>)
 8000a22:	f002 ffa1 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a2c:	f000 f980 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a30:	2360      	movs	r3, #96	; 0x60
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_TIM1_Init+0x138>)
 8000a56:	f002 fa09 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a60:	f000 f966 	bl	8000d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM1_Init+0x138>)
 8000a88:	f002 ffea 	bl	8003a60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a92:	f000 f94d 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM1_Init+0x138>)
 8000a98:	f000 f9e0 	bl	8000e5c <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3758      	adds	r7, #88	; 0x58
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000002c 	.word	0x2000002c
 8000aa8:	40010000 	.word	0x40010000

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad2:	22a7      	movs	r2, #167	; 0xa7
 8000ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ade:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000af2:	f001 fe0f 	bl	8002714 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000afc:	f000 f918 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b0e:	f002 fa6f 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 f90a 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b2a:	f002 ff1d 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f8fc 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000074 	.word	0x20000074

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_USART1_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	f002 ffc2 	bl	8003b04 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f8d3 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000011c 	.word	0x2000011c
 8000b94:	40011000 	.word	0x40011000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2039      	movs	r0, #57	; 0x39
 8000bc0:	f000 fb93 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bc4:	2039      	movs	r0, #57	; 0x39
 8000bc6:	f000 fbac 	bl	8001322 <HAL_NVIC_EnableIRQ>

}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_GPIO_Init+0xb8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000c74:	f000 ff02 	bl	8001a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2006      	movs	r0, #6
 8000c7e:	f000 fb34 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c82:	2006      	movs	r0, #6
 8000c84:	f000 fb4d 	bl	8001322 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d120      	bne.n	8000cea <HAL_GPIO_EXTI_Callback+0x52>
		if (cnt == 0){
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d103      	bne.n	8000cb8 <HAL_GPIO_EXTI_Callback+0x20>
			timestamp = 0;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e004      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x2a>
		}
		else{
			timestamp = TIM2->CNT;
 8000cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]
		}
		pattern[cnt] = (GPIOB->IDR & 0x01);
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cca:	8812      	ldrh	r2, [r2, #0]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	b2d9      	uxtb	r1, r3
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cd4:	5499      	strb	r1, [r3, r2]
		cnt = cnt + 1;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ce0:	801a      	strh	r2, [r3, #0]
		TIM2->CNT = 0;
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24

	}
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000162 	.word	0x20000162
 8000cfc:	2000bcb4 	.word	0x2000bcb4
 8000d00:	40020400 	.word	0x40020400
 8000d04:	20005f0c 	.word	0x20005f0c

08000d08 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000d10:	2100      	movs	r1, #0
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000d14:	f001 ffd8 	bl	8002cc8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000002c 	.word	0x2000002c
 8000d2c:	20000000 	.word	0x20000000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <HAL_TIM_Base_MspInit+0xc0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d13e      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_TIM_Base_MspInit+0xc4>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <HAL_TIM_Base_MspInit+0xc4>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <HAL_TIM_Base_MspInit+0xc4>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dbc:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_TIM_Base_MspInit+0xcc>)
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dc2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000dc6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dda:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000e00:	f000 faaa 	bl	8001358 <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000e0a:	f7ff ff91 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_TIM_Base_MspInit+0xc8>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e1a:	e012      	b.n	8000e42 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d10d      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_TIM_Base_MspInit+0xc4>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_TIM_Base_MspInit+0xc4>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_TIM_Base_MspInit+0xc4>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	200000bc 	.word	0x200000bc
 8000e58:	40026428 	.word	0x40026428

08000e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_TIM_MspPostInit+0x68>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d11e      	bne.n	8000ebc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_TIM_MspPostInit+0x70>)
 8000eb8:	f000 fde0 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12c      	bne.n	8000f4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_UART_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_UART_MspInit+0x8c>)
 8000f48:	f000 fd98 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8a2 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 fefb 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <DMA2_Stream1_IRQHandler+0x10>)
 8000fca:	f000 faed 	bl	80015a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000bc 	.word	0x200000bc

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 f835 	bl	8004098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fbab 	bl	8000788 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001040:	08004128 	.word	0x08004128
  ldr r2, =_sbss
 8001044:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001048:	20019378 	.word	0x20019378

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f92b 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe5a 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f943 	bl	800133e <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f90b 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000004 	.word	0x20000004
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20019374 	.word	0x20019374

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20019374 	.word	0x20019374

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff feda 	bl	800111c <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e099      	b.n	80014a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001394:	e00f      	b.n	80013b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001396:	f7ff fec1 	bl	800111c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d908      	bls.n	80013b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e078      	b.n	80014a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_DMA_Init+0x158>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	2b04      	cmp	r3, #4
 800140e:	d107      	bne.n	8001420 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4313      	orrs	r3, r2
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f023 0307 	bic.w	r3, r3, #7
 8001436:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	2b04      	cmp	r3, #4
 8001448:	d117      	bne.n	800147a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00e      	beq.n	800147a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fa91 	bl	8001984 <DMA_CheckFifoParam>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001476:	2301      	movs	r3, #1
 8001478:	e016      	b.n	80014a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa48 	bl	8001918 <DMA_CalcBaseAndBitshift>
 8001488:	4603      	mov	r3, r0
 800148a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	223f      	movs	r2, #63	; 0x3f
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	f010803f 	.word	0xf010803f

080014b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Start_IT+0x26>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e040      	b.n	800155c <HAL_DMA_Start_IT+0xa8>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d12f      	bne.n	800154e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f9da 	bl	80018bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	223f      	movs	r2, #63	; 0x3f
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0216 	orr.w	r2, r2, #22
 8001522:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e005      	b.n	800155a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d004      	beq.n	8001582 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00c      	b.n	800159c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2205      	movs	r2, #5
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015b4:	4b8e      	ldr	r3, [pc, #568]	; (80017f0 <HAL_DMA_IRQHandler+0x248>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a8e      	ldr	r2, [pc, #568]	; (80017f4 <HAL_DMA_IRQHandler+0x24c>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0a9b      	lsrs	r3, r3, #10
 80015c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	2208      	movs	r2, #8
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d013      	beq.n	8001614 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0204 	bic.w	r2, r2, #4
 80015fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	2208      	movs	r2, #8
 8001602:	409a      	lsls	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2201      	movs	r2, #1
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d012      	beq.n	800164a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	2201      	movs	r2, #1
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f043 0202 	orr.w	r2, r3, #2
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2204      	movs	r2, #4
 8001650:	409a      	lsls	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d012      	beq.n	8001680 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	2204      	movs	r2, #4
 800166e:	409a      	lsls	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2210      	movs	r2, #16
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d043      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03c      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2210      	movs	r2, #16
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d018      	beq.n	80016ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d024      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
 80016d6:	e01f      	b.n	8001718 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01b      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
 80016e8:	e016      	b.n	8001718 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d107      	bne.n	8001708 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0208 	bic.w	r2, r2, #8
 8001706:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2220      	movs	r2, #32
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 808f 	beq.w	8001848 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8087 	beq.w	8001848 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2220      	movs	r2, #32
 8001740:	409a      	lsls	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b05      	cmp	r3, #5
 8001750:	d136      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0216 	bic.w	r2, r2, #22
 8001760:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001770:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <HAL_DMA_IRQHandler+0x1da>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0208 	bic.w	r2, r2, #8
 8001790:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	223f      	movs	r2, #63	; 0x3f
 8001798:	409a      	lsls	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d07e      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
        }
        return;
 80017be:	e079      	b.n	80018b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01d      	beq.n	800180a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d031      	beq.n	8001848 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
 80017ec:	e02c      	b.n	8001848 <HAL_DMA_IRQHandler+0x2a0>
 80017ee:	bf00      	nop
 80017f0:	20000004 	.word	0x20000004
 80017f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d023      	beq.n	8001848 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
 8001808:	e01e      	b.n	8001848 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10f      	bne.n	8001838 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0210 	bic.w	r2, r2, #16
 8001826:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	2b00      	cmp	r3, #0
 800184e:	d032      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d022      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2205      	movs	r2, #5
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	d307      	bcc.n	8001890 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f2      	bne.n	8001874 <HAL_DMA_IRQHandler+0x2cc>
 800188e:	e000      	b.n	8001892 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001890:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
 80018b2:	e000      	b.n	80018b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018b4:	bf00      	nop
    }
  }
}
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b40      	cmp	r3, #64	; 0x40
 80018e8:	d108      	bne.n	80018fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018fa:	e007      	b.n	800190c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	60da      	str	r2, [r3, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3b10      	subs	r3, #16
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <DMA_CalcBaseAndBitshift+0x64>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <DMA_CalcBaseAndBitshift+0x68>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d909      	bls.n	800195a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58
 8001958:	e007      	b.n	800196a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	aaaaaaab 	.word	0xaaaaaaab
 8001980:	08004110 	.word	0x08004110

08001984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11f      	bne.n	80019de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d856      	bhi.n	8001a52 <DMA_CheckFifoParam+0xce>
 80019a4:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <DMA_CheckFifoParam+0x28>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019cf 	.word	0x080019cf
 80019b4:	080019bd 	.word	0x080019bd
 80019b8:	08001a53 	.word	0x08001a53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d046      	beq.n	8001a56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019cc:	e043      	b.n	8001a56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d6:	d140      	bne.n	8001a5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019dc:	e03d      	b.n	8001a5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e6:	d121      	bne.n	8001a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d837      	bhi.n	8001a5e <DMA_CheckFifoParam+0xda>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <DMA_CheckFifoParam+0x70>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a0b 	.word	0x08001a0b
 80019fc:	08001a05 	.word	0x08001a05
 8001a00:	08001a1d 	.word	0x08001a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      break;
 8001a08:	e030      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d025      	beq.n	8001a62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a1a:	e022      	b.n	8001a62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a24:	d11f      	bne.n	8001a66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a2a:	e01c      	b.n	8001a66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d903      	bls.n	8001a3a <DMA_CheckFifoParam+0xb6>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d003      	beq.n	8001a40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a38:	e018      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3e:	e015      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00e      	beq.n	8001a6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a50:	e00b      	b.n	8001a6a <DMA_CheckFifoParam+0xe6>
      break;
 8001a52:	bf00      	nop
 8001a54:	e00a      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e008      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e006      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e004      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a62:	bf00      	nop
 8001a64:	e002      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e16b      	b.n	8001d70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 815a 	bne.w	8001d6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80b4 	beq.w	8001d6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a5f      	ldr	r2, [pc, #380]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_GPIO_Init+0x30c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <HAL_GPIO_Init+0x310>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x314>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_GPIO_Init+0x318>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d025      	beq.n	8001c9e <HAL_GPIO_Init+0x222>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_GPIO_Init+0x31c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <HAL_GPIO_Init+0x21e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x320>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x21a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_GPIO_Init+0x324>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x216>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x328>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x212>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_GPIO_Init+0x32c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_GPIO_Init+0x330>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x20a>
 8001c82:	2307      	movs	r3, #7
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x310>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae90 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff60 	bl	8000c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013c00 	.word	0x40013c00

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e267      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d075      	beq.n	8001eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e02:	4b88      	ldr	r3, [pc, #544]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d00c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b85      	ldr	r3, [pc, #532]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4b7e      	ldr	r3, [pc, #504]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05b      	beq.n	8001eec <HAL_RCC_OscConfig+0x108>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d157      	bne.n	8001eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e242      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x74>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6f      	ldr	r2, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e7c:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a68      	ldr	r2, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f93e 	bl	800111c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f93a 	bl	800111c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e207      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xc0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f92a 	bl	800111c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f926 	bl	800111c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1f3      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0xe8>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001efa:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1c7      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4937      	ldr	r1, [pc, #220]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e03a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f8df 	bl	800111c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f62:	f7ff f8db 	bl	800111c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a8      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4925      	ldr	r1, [pc, #148]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f8be 	bl	800111c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff f8ba 	bl	800111c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e187      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d036      	beq.n	800203c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_RCC_OscConfig+0x248>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f89e 	bl	800111c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f89a 	bl	800111c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e167      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x200>
 8002002:	e01b      	b.n	800203c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x248>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff f887 	bl	800111c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	e00e      	b.n	8002030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff f883 	bl	800111c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d907      	bls.n	8002030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e150      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002024:	40023800 	.word	0x40023800
 8002028:	42470000 	.word	0x42470000
 800202c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ea      	bne.n	8002012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8097 	beq.w	8002178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b81      	ldr	r3, [pc, #516]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a7c      	ldr	r2, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b77      	ldr	r3, [pc, #476]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b74      	ldr	r3, [pc, #464]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a73      	ldr	r2, [pc, #460]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7ff f843 	bl	800111c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7ff f83f 	bl	800111c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e10c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x2ea>
 80020c0:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a63      	ldr	r2, [pc, #396]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x30c>
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a5b      	ldr	r2, [pc, #364]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020f0:	4b58      	ldr	r3, [pc, #352]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a57      	ldr	r2, [pc, #348]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
 80020fc:	4b55      	ldr	r3, [pc, #340]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a54      	ldr	r2, [pc, #336]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff f804 	bl	800111c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7ff f800 	bl	800111c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0cb      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0ee      	beq.n	8002118 <HAL_RCC_OscConfig+0x334>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe ffee 	bl	800111c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe ffea 	bl	800111c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0b5      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ee      	bne.n	8002144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	4a38      	ldr	r2, [pc, #224]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80a1 	beq.w	80022c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d05c      	beq.n	8002248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d141      	bne.n	800221a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x478>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe ffbe 	bl	800111c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ffba 	bl	800111c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e087      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	491b      	ldr	r1, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x478>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe ff93 	bl	800111c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe ff8f 	bl	800111c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e05c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x416>
 8002218:	e054      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe ff7c 	bl	800111c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe ff78 	bl	800111c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e045      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x444>
 8002246:	e03d      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e038      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x4ec>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d028      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d121      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d11a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	4293      	cmp	r3, r2
 800229a:	d111      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0cc      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800234a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e067      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4934      	ldr	r1, [pc, #208]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe feaa 	bl	800111c <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fea6 	bl	800111c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e04f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20c      	bcs.n	800241c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fe0a 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00
 8002490:	40023800 	.word	0x40023800
 8002494:	080040f8 	.word	0x080040f8
 8002498:	20000004 	.word	0x20000004
 800249c:	20000008 	.word	0x20000008

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b094      	sub	sp, #80	; 0x50
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	647b      	str	r3, [r7, #68]	; 0x44
 80024ac:	2300      	movs	r3, #0
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b0:	2300      	movs	r3, #0
 80024b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b8:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	f200 80e1 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x3a>
 80024d2:	e0db      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024d8:	e0db      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024de:	e0d8      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	2200      	movs	r2, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
 800250e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002512:	4622      	mov	r2, r4
 8002514:	462b      	mov	r3, r5
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4621      	mov	r1, r4
 800252c:	1a51      	subs	r1, r2, r1
 800252e:	6139      	str	r1, [r7, #16]
 8002530:	4629      	mov	r1, r5
 8002532:	eb63 0301 	sbc.w	r3, r3, r1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002544:	4659      	mov	r1, fp
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	4651      	mov	r1, sl
 800254a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254e:	4651      	mov	r1, sl
 8002550:	018a      	lsls	r2, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	ebb2 0801 	subs.w	r8, r2, r1
 8002558:	4659      	mov	r1, fp
 800255a:	eb63 0901 	sbc.w	r9, r3, r1
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002572:	4690      	mov	r8, r2
 8002574:	4699      	mov	r9, r3
 8002576:	4623      	mov	r3, r4
 8002578:	eb18 0303 	adds.w	r3, r8, r3
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	462b      	mov	r3, r5
 8002580:	eb49 0303 	adc.w	r3, r9, r3
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002592:	4629      	mov	r1, r5
 8002594:	024b      	lsls	r3, r1, #9
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800259c:	4621      	mov	r1, r4
 800259e:	024a      	lsls	r2, r1, #9
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a6:	2200      	movs	r2, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025b0:	f7fd fe0a 	bl	80001c8 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025bc:	e058      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	2200      	movs	r2, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	4611      	mov	r1, r2
 80025ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025d8:	4642      	mov	r2, r8
 80025da:	464b      	mov	r3, r9
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	0159      	lsls	r1, r3, #5
 80025e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ea:	0150      	lsls	r0, r2, #5
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4641      	mov	r1, r8
 80025f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800260c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002610:	ebb2 040a 	subs.w	r4, r2, sl
 8002614:	eb63 050b 	sbc.w	r5, r3, fp
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	00eb      	lsls	r3, r5, #3
 8002622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002626:	00e2      	lsls	r2, r4, #3
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	4643      	mov	r3, r8
 800262e:	18e3      	adds	r3, r4, r3
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	464b      	mov	r3, r9
 8002634:	eb45 0303 	adc.w	r3, r5, r3
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	4629      	mov	r1, r5
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002650:	4621      	mov	r1, r4
 8002652:	028a      	lsls	r2, r1, #10
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265a:	2200      	movs	r2, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	61fa      	str	r2, [r7, #28]
 8002660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002664:	f7fd fdb0 	bl	80001c8 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002694:	4618      	mov	r0, r3
 8002696:	3750      	adds	r7, #80	; 0x50
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a9b      	lsrs	r3, r3, #10
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08004108 	.word	0x08004108

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0b5b      	lsrs	r3, r3, #13
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08004108 	.word	0x08004108

08002714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e041      	b.n	80027aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fb26 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f000 fdf8 	bl	8003348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e046      	b.n	800285a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_TIM_Base_Start+0xb4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d022      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e6:	d01d      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_TIM_Base_Start+0xb8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d018      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_TIM_Base_Start+0xbc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d013      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_TIM_Base_Start+0xc0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00e      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_TIM_Base_Start+0xc4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_TIM_Base_Start+0xc8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d004      	beq.n	8002824 <HAL_TIM_Base_Start+0x70>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_TIM_Base_Start+0xcc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d111      	bne.n	8002848 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b06      	cmp	r3, #6
 8002834:	d010      	beq.n	8002858 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002846:	e007      	b.n	8002858 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000
 800286c:	40000400 	.word	0x40000400
 8002870:	40000800 	.word	0x40000800
 8002874:	40000c00 	.word	0x40000c00
 8002878:	40010400 	.word	0x40010400
 800287c:	40014000 	.word	0x40014000
 8002880:	40001800 	.word	0x40001800

08002884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f839 	bl	8002922 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 fd40 	bl	8003348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e022      	b.n	80029aa <HAL_TIM_PWM_Start_DMA+0x72>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d109      	bne.n	800297e <HAL_TIM_PWM_Start_DMA+0x46>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	e015      	b.n	80029aa <HAL_TIM_PWM_Start_DMA+0x72>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d109      	bne.n	8002998 <HAL_TIM_PWM_Start_DMA+0x60>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e008      	b.n	80029aa <HAL_TIM_PWM_Start_DMA+0x72>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	e171      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_TIM_PWM_Start_DMA+0x94>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e022      	b.n	8002a12 <HAL_TIM_PWM_Start_DMA+0xda>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d109      	bne.n	80029e6 <HAL_TIM_PWM_Start_DMA+0xae>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	e015      	b.n	8002a12 <HAL_TIM_PWM_Start_DMA+0xda>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d109      	bne.n	8002a00 <HAL_TIM_PWM_Start_DMA+0xc8>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e008      	b.n	8002a12 <HAL_TIM_PWM_Start_DMA+0xda>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d024      	beq.n	8002a60 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start_DMA+0xee>
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e137      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a34:	e016      	b.n	8002a64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a44:	e00e      	b.n	8002a64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a54:	e006      	b.n	8002a64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a5e:	e001      	b.n	8002a64 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e118      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	f200 80ae 	bhi.w	8002bc8 <HAL_TIM_PWM_Start_DMA+0x290>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002bc9 	.word	0x08002bc9
 8002a7c:	08002bc9 	.word	0x08002bc9
 8002a80:	08002bc9 	.word	0x08002bc9
 8002a84:	08002af1 	.word	0x08002af1
 8002a88:	08002bc9 	.word	0x08002bc9
 8002a8c:	08002bc9 	.word	0x08002bc9
 8002a90:	08002bc9 	.word	0x08002bc9
 8002a94:	08002b39 	.word	0x08002b39
 8002a98:	08002bc9 	.word	0x08002bc9
 8002a9c:	08002bc9 	.word	0x08002bc9
 8002aa0:	08002bc9 	.word	0x08002bc9
 8002aa4:	08002b81 	.word	0x08002b81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	4a7c      	ldr	r2, [pc, #496]	; (8002ca0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	4a7b      	ldr	r2, [pc, #492]	; (8002ca4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002abe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3334      	adds	r3, #52	; 0x34
 8002acc:	461a      	mov	r2, r3
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	f7fe fcf0 	bl	80014b4 <HAL_DMA_Start_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0db      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	60da      	str	r2, [r3, #12]
      break;
 8002aee:	e06e      	b.n	8002bce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	4a69      	ldr	r2, [pc, #420]	; (8002ca4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	4a68      	ldr	r2, [pc, #416]	; (8002ca8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002b06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3338      	adds	r3, #56	; 0x38
 8002b14:	461a      	mov	r2, r3
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	f7fe fccc 	bl	80014b4 <HAL_DMA_Start_IT>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0b7      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b34:	60da      	str	r2, [r3, #12]
      break;
 8002b36:	e04a      	b.n	8002bce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	4a57      	ldr	r2, [pc, #348]	; (8002ca4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4a56      	ldr	r2, [pc, #344]	; (8002ca8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002b4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	333c      	adds	r3, #60	; 0x3c
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	f7fe fca8 	bl	80014b4 <HAL_DMA_Start_IT>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e093      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7c:	60da      	str	r2, [r3, #12]
      break;
 8002b7e:	e026      	b.n	8002bce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a46      	ldr	r2, [pc, #280]	; (8002ca0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a45      	ldr	r2, [pc, #276]	; (8002ca4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a44      	ldr	r2, [pc, #272]	; (8002ca8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002b96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3340      	adds	r3, #64	; 0x40
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	f7fe fc84 	bl	80014b4 <HAL_DMA_Start_IT>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bc4:	60da      	str	r2, [r3, #12]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
      break;
 8002bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d15f      	bne.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fe9d 	bl	800391c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a31      	ldr	r2, [pc, #196]	; (8002cac <HAL_TIM_PWM_Start_DMA+0x374>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a25      	ldr	r2, [pc, #148]	; (8002cac <HAL_TIM_PWM_Start_DMA+0x374>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d022      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d01d      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_TIM_PWM_Start_DMA+0x384>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_PWM_Start_DMA+0x328>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d010      	beq.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08003239 	.word	0x08003239
 8002ca4:	080032e1 	.word	0x080032e1
 8002ca8:	080031a7 	.word	0x080031a7
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40010400 	.word	0x40010400
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40014000 	.word	0x40014000
 8002cc4:	40001800 	.word	0x40001800

08002cc8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d855      	bhi.n	8002d88 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002d19 	.word	0x08002d19
 8002ce8:	08002d89 	.word	0x08002d89
 8002cec:	08002d89 	.word	0x08002d89
 8002cf0:	08002d89 	.word	0x08002d89
 8002cf4:	08002d35 	.word	0x08002d35
 8002cf8:	08002d89 	.word	0x08002d89
 8002cfc:	08002d89 	.word	0x08002d89
 8002d00:	08002d89 	.word	0x08002d89
 8002d04:	08002d51 	.word	0x08002d51
 8002d08:	08002d89 	.word	0x08002d89
 8002d0c:	08002d89 	.word	0x08002d89
 8002d10:	08002d89 	.word	0x08002d89
 8002d14:	08002d6d 	.word	0x08002d6d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fc19 	bl	8001564 <HAL_DMA_Abort_IT>
      break;
 8002d32:	e02c      	b.n	8002d8e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fc0b 	bl	8001564 <HAL_DMA_Abort_IT>
      break;
 8002d4e:	e01e      	b.n	8002d8e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fbfd 	bl	8001564 <HAL_DMA_Abort_IT>
      break;
 8002d6a:	e010      	b.n	8002d8e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fbef 	bl	8001564 <HAL_DMA_Abort_IT>
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d161      	bne.n	8002e58 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fdbd 	bl	800391c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_PWM_Stop_DMA+0xf2>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d017      	beq.n	8002df0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10f      	bne.n	8002df0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	f240 4344 	movw	r3, #1092	; 0x444
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	f240 4344 	movw	r3, #1092	; 0x444
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_PWM_Stop_DMA+0x158>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_TIM_PWM_Stop_DMA+0x168>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2e:	e013      	b.n	8002e58 <HAL_TIM_PWM_Stop_DMA+0x190>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d104      	bne.n	8002e40 <HAL_TIM_PWM_Stop_DMA+0x178>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3e:	e00b      	b.n	8002e58 <HAL_TIM_PWM_Stop_DMA+0x190>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d104      	bne.n	8002e50 <HAL_TIM_PWM_Stop_DMA+0x188>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4e:	e003      	b.n	8002e58 <HAL_TIM_PWM_Stop_DMA+0x190>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0ae      	b.n	8002fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	f200 809f 	bhi.w	8002fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002fd9 	.word	0x08002fd9
 8002ea8:	08002fd9 	.word	0x08002fd9
 8002eac:	08002fd9 	.word	0x08002fd9
 8002eb0:	08002f15 	.word	0x08002f15
 8002eb4:	08002fd9 	.word	0x08002fd9
 8002eb8:	08002fd9 	.word	0x08002fd9
 8002ebc:	08002fd9 	.word	0x08002fd9
 8002ec0:	08002f57 	.word	0x08002f57
 8002ec4:	08002fd9 	.word	0x08002fd9
 8002ec8:	08002fd9 	.word	0x08002fd9
 8002ecc:	08002fd9 	.word	0x08002fd9
 8002ed0:	08002f97 	.word	0x08002f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fad4 	bl	8003488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6999      	ldr	r1, [r3, #24]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	619a      	str	r2, [r3, #24]
      break;
 8002f12:	e064      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb24 	bl	8003568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]
      break;
 8002f54:	e043      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fb79 	bl	8003654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0208 	orr.w	r2, r2, #8
 8002f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0204 	bic.w	r2, r2, #4
 8002f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69d9      	ldr	r1, [r3, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
      break;
 8002f94:	e023      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fbcd 	bl	800373c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
      break;
 8002fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIM_ConfigClockSource+0x1c>
 8003008:	2302      	movs	r3, #2
 800300a:	e0b4      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x186>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800302a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d03e      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304a:	f200 8087 	bhi.w	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003052:	f000 8086 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x172>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	d87f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b70      	cmp	r3, #112	; 0x70
 800305e:	d01a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xa6>
 8003060:	2b70      	cmp	r3, #112	; 0x70
 8003062:	d87b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b60      	cmp	r3, #96	; 0x60
 8003066:	d050      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x11a>
 8003068:	2b60      	cmp	r3, #96	; 0x60
 800306a:	d877      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b50      	cmp	r3, #80	; 0x50
 800306e:	d03c      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0xfa>
 8003070:	2b50      	cmp	r3, #80	; 0x50
 8003072:	d873      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d058      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x13a>
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d86f      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b30      	cmp	r3, #48	; 0x30
 800307e:	d064      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b30      	cmp	r3, #48	; 0x30
 8003082:	d86b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b20      	cmp	r3, #32
 8003086:	d060      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	2b20      	cmp	r3, #32
 800308a:	d867      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05c      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003090:	2b10      	cmp	r3, #16
 8003092:	d05a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	e062      	b.n	800315c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f000 fc19 	bl	80038dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]
      break;
 80030c2:	e04f      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f000 fc02 	bl	80038dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e6:	609a      	str	r2, [r3, #8]
      break;
 80030e8:	e03c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fb76 	bl	80037e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2150      	movs	r1, #80	; 0x50
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fbcf 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003108:	e02c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 fb95 	bl	8003846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2160      	movs	r1, #96	; 0x60
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fbbf 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003128:	e01c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 fb56 	bl	80037e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fbaf 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 8003148:	e00c      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f000 fba6 	bl	80038a6 <TIM_ITRx_SetConfig>
      break;
 800315a:	e003      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e000      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d107      	bne.n	80031ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	e02a      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2202      	movs	r2, #2
 80031dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e6:	e01d      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d107      	bne.n	8003202 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	e010      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2208      	movs	r2, #8
 8003210:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800321a:	e003      	b.n	8003224 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ffb4 	bl	8003192 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d10b      	bne.n	8003268 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d136      	bne.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003266:	e031      	b.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d10b      	bne.n	800328a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2202      	movs	r2, #2
 8003276:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d125      	bne.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003288:	e020      	b.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d10b      	bne.n	80032ac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2204      	movs	r2, #4
 8003298:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d114      	bne.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032aa:	e00f      	b.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d10a      	bne.n	80032cc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2208      	movs	r2, #8
 80032ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7fd fd1b 	bl	8000d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d103      	bne.n	8003300 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	771a      	strb	r2, [r3, #28]
 80032fe:	e019      	b.n	8003334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d103      	bne.n	8003312 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
 8003310:	e010      	b.n	8003334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d103      	bne.n	8003324 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2204      	movs	r2, #4
 8003320:	771a      	strb	r2, [r3, #28]
 8003322:	e007      	b.n	8003334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d102      	bne.n	8003334 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2208      	movs	r2, #8
 8003332:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff ff22 	bl	800317e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a40      	ldr	r2, [pc, #256]	; (800345c <TIM_Base_SetConfig+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d00f      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3d      	ldr	r2, [pc, #244]	; (8003460 <TIM_Base_SetConfig+0x118>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3c      	ldr	r2, [pc, #240]	; (8003464 <TIM_Base_SetConfig+0x11c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <TIM_Base_SetConfig+0x120>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3a      	ldr	r2, [pc, #232]	; (800346c <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <TIM_Base_SetConfig+0x114>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d027      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <TIM_Base_SetConfig+0x118>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d023      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <TIM_Base_SetConfig+0x11c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <TIM_Base_SetConfig+0x120>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a29      	ldr	r2, [pc, #164]	; (800346c <TIM_Base_SetConfig+0x124>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a28      	ldr	r2, [pc, #160]	; (8003470 <TIM_Base_SetConfig+0x128>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <TIM_Base_SetConfig+0x12c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <TIM_Base_SetConfig+0x130>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <TIM_Base_SetConfig+0x134>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <TIM_Base_SetConfig+0x138>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <TIM_Base_SetConfig+0x13c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <TIM_Base_SetConfig+0x114>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0xf8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <TIM_Base_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40010400 	.word	0x40010400
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40001800 	.word	0x40001800
 8003480:	40001c00 	.word	0x40001c00
 8003484:	40002000 	.word	0x40002000

08003488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 0302 	bic.w	r3, r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_OC1_SetConfig+0xd8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_OC1_SetConfig+0x64>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <TIM_OC1_SetConfig+0xdc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10c      	bne.n	8003506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <TIM_OC1_SetConfig+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_OC1_SetConfig+0x8e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <TIM_OC1_SetConfig+0xdc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d111      	bne.n	800353a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	621a      	str	r2, [r3, #32]
}
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40010000 	.word	0x40010000
 8003564:	40010400 	.word	0x40010400

08003568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0210 	bic.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0320 	bic.w	r3, r3, #32
 80035b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <TIM_OC2_SetConfig+0xe4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_OC2_SetConfig+0x68>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <TIM_OC2_SetConfig+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10d      	bne.n	80035ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <TIM_OC2_SetConfig+0xe4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_OC2_SetConfig+0x94>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a16      	ldr	r2, [pc, #88]	; (8003650 <TIM_OC2_SetConfig+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d113      	bne.n	8003624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40010400 	.word	0x40010400

08003654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800369c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a21      	ldr	r2, [pc, #132]	; (8003734 <TIM_OC3_SetConfig+0xe0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_OC3_SetConfig+0x66>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a20      	ldr	r2, [pc, #128]	; (8003738 <TIM_OC3_SetConfig+0xe4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10d      	bne.n	80036d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a16      	ldr	r2, [pc, #88]	; (8003734 <TIM_OC3_SetConfig+0xe0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC3_SetConfig+0x92>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a15      	ldr	r2, [pc, #84]	; (8003738 <TIM_OC3_SetConfig+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d113      	bne.n	800370e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40010000 	.word	0x40010000
 8003738:	40010400 	.word	0x40010400

0800373c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <TIM_OC4_SetConfig+0xa4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_OC4_SetConfig+0x68>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <TIM_OC4_SetConfig+0xa8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d109      	bne.n	80037b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f023 0201 	bic.w	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 030a 	bic.w	r3, r3, #10
 8003824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0210 	bic.w	r2, r3, #16
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	031b      	lsls	r3, r3, #12
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f043 0307 	orr.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	021a      	lsls	r2, r3, #8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	431a      	orrs	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4313      	orrs	r3, r2
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2201      	movs	r2, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e05a      	b.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d022      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d01d      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d018      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00e      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10c      	bne.n	8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40010000 	.word	0x40010000
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40000c00 	.word	0x40000c00
 8003a54:	40010400 	.word	0x40010400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40001800 	.word	0x40001800

08003a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e03d      	b.n	8003af8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e03f      	b.n	8003b96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f9d0 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f829 	bl	8003ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b0c0      	sub	sp, #256	; 0x100
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	ea40 0301 	orr.w	r3, r0, r1
 8003bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bf8:	f021 010c 	bic.w	r1, r1, #12
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c06:	430b      	orrs	r3, r1
 8003c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	6999      	ldr	r1, [r3, #24]
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	ea40 0301 	orr.w	r3, r0, r1
 8003c26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b8f      	ldr	r3, [pc, #572]	; (8003e6c <UART_SetConfig+0x2cc>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d005      	beq.n	8003c40 <UART_SetConfig+0xa0>
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <UART_SetConfig+0x2d0>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d104      	bne.n	8003c4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fd54 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003c44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c48:	e003      	b.n	8003c52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c4a:	f7fe fd3b 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5c:	f040 810c 	bne.w	8003e78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c82:	4621      	mov	r1, r4
 8003c84:	eb12 0801 	adds.w	r8, r2, r1
 8003c88:	4629      	mov	r1, r5
 8003c8a:	eb43 0901 	adc.w	r9, r3, r1
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca2:	4690      	mov	r8, r2
 8003ca4:	4699      	mov	r9, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	eb18 0303 	adds.w	r3, r8, r3
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb49 0303 	adc.w	r3, r9, r3
 8003cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cce:	460b      	mov	r3, r1
 8003cd0:	18db      	adds	r3, r3, r3
 8003cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	657b      	str	r3, [r7, #84]	; 0x54
 8003cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ce4:	f7fc fa70 	bl	80001c8 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011c      	lsls	r4, r3, #4
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d10:	415b      	adcs	r3, r3
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d18:	4641      	mov	r1, r8
 8003d1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d1e:	4649      	mov	r1, r9
 8003d20:	eb43 0b01 	adc.w	fp, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d38:	4692      	mov	sl, r2
 8003d3a:	469b      	mov	fp, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb4b 0303 	adc.w	r3, fp, r3
 8003d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d64:	460b      	mov	r3, r1
 8003d66:	18db      	adds	r3, r3, r3
 8003d68:	643b      	str	r3, [r7, #64]	; 0x40
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
 8003d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d7a:	f7fc fa25 	bl	80001c8 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003d86:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2264      	movs	r2, #100	; 0x64
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	1acb      	subs	r3, r1, r3
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d9a:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003da8:	441c      	add	r4, r3
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003db8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dcc:	4641      	mov	r1, r8
 8003dce:	1851      	adds	r1, r2, r1
 8003dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	414b      	adcs	r3, r1
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003de4:	4659      	mov	r1, fp
 8003de6:	00cb      	lsls	r3, r1, #3
 8003de8:	4651      	mov	r1, sl
 8003dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dee:	4651      	mov	r1, sl
 8003df0:	00ca      	lsls	r2, r1, #3
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e00:	464b      	mov	r3, r9
 8003e02:	460a      	mov	r2, r1
 8003e04:	eb42 0303 	adc.w	r3, r2, r3
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e20:	460b      	mov	r3, r1
 8003e22:	18db      	adds	r3, r3, r3
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	4613      	mov	r3, r2
 8003e28:	eb42 0303 	adc.w	r3, r2, r3
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e36:	f7fc f9c7 	bl	80001c8 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <UART_SetConfig+0x2d4>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 0207 	and.w	r2, r3, #7
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4422      	add	r2, r4
 8003e66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e68:	e106      	b.n	8004078 <UART_SetConfig+0x4d8>
 8003e6a:	bf00      	nop
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40011400 	.word	0x40011400
 8003e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	6239      	str	r1, [r7, #32]
 8003e92:	415b      	adcs	r3, r3
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	1854      	adds	r4, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb43 0501 	adc.w	r5, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	00eb      	lsls	r3, r5, #3
 8003eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb2:	00e2      	lsls	r2, r4, #3
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	4643      	mov	r3, r8
 8003eba:	18e3      	adds	r3, r4, r3
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	eb45 0303 	adc.w	r3, r5, r3
 8003ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	008b      	lsls	r3, r1, #2
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	008a      	lsls	r2, r1, #2
 8003ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ef8:	f7fc f966 	bl	80001c8 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4b60      	ldr	r3, [pc, #384]	; (8004084 <UART_SetConfig+0x4e4>)
 8003f02:	fba3 2302 	umull	r2, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	011c      	lsls	r4, r3, #4
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	61b9      	str	r1, [r7, #24]
 8003f24:	415b      	adcs	r3, r3
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6139      	str	r1, [r7, #16]
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f84:	4649      	mov	r1, r9
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8e:	4641      	mov	r1, r8
 8003f90:	008a      	lsls	r2, r1, #2
 8003f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f96:	f7fc f917 	bl	80001c8 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <UART_SetConfig+0x4e4>)
 8003fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2264      	movs	r2, #100	; 0x64
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	1acb      	subs	r3, r1, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a33      	ldr	r2, [pc, #204]	; (8004084 <UART_SetConfig+0x4e4>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	441c      	add	r4, r3
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003fca:	677a      	str	r2, [r7, #116]	; 0x74
 8003fcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	1851      	adds	r1, r2, r1
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	414b      	adcs	r3, r1
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	00cb      	lsls	r3, r1, #3
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004002:	4651      	mov	r1, sl
 8004004:	00ca      	lsls	r2, r1, #3
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	4603      	mov	r3, r0
 800400c:	4642      	mov	r2, r8
 800400e:	189b      	adds	r3, r3, r2
 8004010:	66bb      	str	r3, [r7, #104]	; 0x68
 8004012:	464b      	mov	r3, r9
 8004014:	460a      	mov	r2, r1
 8004016:	eb42 0303 	adc.w	r3, r2, r3
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
 8004026:	667a      	str	r2, [r7, #100]	; 0x64
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004034:	4649      	mov	r1, r9
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	4641      	mov	r1, r8
 800403a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403e:	4641      	mov	r1, r8
 8004040:	008a      	lsls	r2, r1, #2
 8004042:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004046:	f7fc f8bf 	bl	80001c8 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <UART_SetConfig+0x4e4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	; 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	3332      	adds	r3, #50	; 0x32
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <UART_SetConfig+0x4e4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4422      	add	r2, r4
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800407e:	46bd      	mov	sp, r7
 8004080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004084:	51eb851f 	.word	0x51eb851f

08004088 <memset>:
 8004088:	4402      	add	r2, r0
 800408a:	4603      	mov	r3, r0
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	f803 1b01 	strb.w	r1, [r3], #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	4d0d      	ldr	r5, [pc, #52]	; (80040d0 <__libc_init_array+0x38>)
 800409c:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <__libc_init_array+0x3c>)
 800409e:	1b64      	subs	r4, r4, r5
 80040a0:	10a4      	asrs	r4, r4, #2
 80040a2:	2600      	movs	r6, #0
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	4d0b      	ldr	r5, [pc, #44]	; (80040d8 <__libc_init_array+0x40>)
 80040aa:	4c0c      	ldr	r4, [pc, #48]	; (80040dc <__libc_init_array+0x44>)
 80040ac:	f000 f818 	bl	80040e0 <_init>
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	2600      	movs	r6, #0
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	08004120 	.word	0x08004120
 80040d4:	08004120 	.word	0x08004120
 80040d8:	08004120 	.word	0x08004120
 80040dc:	08004124 	.word	0x08004124

080040e0 <_init>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr

080040ec <_fini>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr
